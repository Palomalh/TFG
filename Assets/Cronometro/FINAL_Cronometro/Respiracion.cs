//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Cronometro/FINAL_Cronometro/Respiracion.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Respiracion : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Respiracion()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Respiracion"",
    ""maps"": [
        {
            ""name"": ""Respirar"",
            ""id"": ""479d67b9-6a34-440c-a291-103f2d5fc927"",
            ""actions"": [
                {
                    ""name"": ""Inspirar"",
                    ""type"": ""Button"",
                    ""id"": ""eed84a84-f7d3-4b0a-8be4-1727c76f99f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.4)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mantener"",
                    ""type"": ""Button"",
                    ""id"": ""768dea26-583b-4f33-a16c-16341144a3f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Espirar"",
                    ""type"": ""Button"",
                    ""id"": ""89f132f3-bc6d-42cc-9772-e4c8c0132ccf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2aab28fc-1a96-4936-9008-7d1b35a4e1d2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inspirar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e1978a0-6b11-406c-be6e-5a9d4dc61300"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mantener"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91d1d889-8031-48a3-8088-f0104f4e41e7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Espirar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Respirar
        m_Respirar = asset.FindActionMap("Respirar", throwIfNotFound: true);
        m_Respirar_Inspirar = m_Respirar.FindAction("Inspirar", throwIfNotFound: true);
        m_Respirar_Mantener = m_Respirar.FindAction("Mantener", throwIfNotFound: true);
        m_Respirar_Espirar = m_Respirar.FindAction("Espirar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Respirar
    private readonly InputActionMap m_Respirar;
    private IRespirarActions m_RespirarActionsCallbackInterface;
    private readonly InputAction m_Respirar_Inspirar;
    private readonly InputAction m_Respirar_Mantener;
    private readonly InputAction m_Respirar_Espirar;
    public struct RespirarActions
    {
        private @Respiracion m_Wrapper;
        public RespirarActions(@Respiracion wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inspirar => m_Wrapper.m_Respirar_Inspirar;
        public InputAction @Mantener => m_Wrapper.m_Respirar_Mantener;
        public InputAction @Espirar => m_Wrapper.m_Respirar_Espirar;
        public InputActionMap Get() { return m_Wrapper.m_Respirar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RespirarActions set) { return set.Get(); }
        public void SetCallbacks(IRespirarActions instance)
        {
            if (m_Wrapper.m_RespirarActionsCallbackInterface != null)
            {
                @Inspirar.started -= m_Wrapper.m_RespirarActionsCallbackInterface.OnInspirar;
                @Inspirar.performed -= m_Wrapper.m_RespirarActionsCallbackInterface.OnInspirar;
                @Inspirar.canceled -= m_Wrapper.m_RespirarActionsCallbackInterface.OnInspirar;
                @Mantener.started -= m_Wrapper.m_RespirarActionsCallbackInterface.OnMantener;
                @Mantener.performed -= m_Wrapper.m_RespirarActionsCallbackInterface.OnMantener;
                @Mantener.canceled -= m_Wrapper.m_RespirarActionsCallbackInterface.OnMantener;
                @Espirar.started -= m_Wrapper.m_RespirarActionsCallbackInterface.OnEspirar;
                @Espirar.performed -= m_Wrapper.m_RespirarActionsCallbackInterface.OnEspirar;
                @Espirar.canceled -= m_Wrapper.m_RespirarActionsCallbackInterface.OnEspirar;
            }
            m_Wrapper.m_RespirarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Inspirar.started += instance.OnInspirar;
                @Inspirar.performed += instance.OnInspirar;
                @Inspirar.canceled += instance.OnInspirar;
                @Mantener.started += instance.OnMantener;
                @Mantener.performed += instance.OnMantener;
                @Mantener.canceled += instance.OnMantener;
                @Espirar.started += instance.OnEspirar;
                @Espirar.performed += instance.OnEspirar;
                @Espirar.canceled += instance.OnEspirar;
            }
        }
    }
    public RespirarActions @Respirar => new RespirarActions(this);
    public interface IRespirarActions
    {
        void OnInspirar(InputAction.CallbackContext context);
        void OnMantener(InputAction.CallbackContext context);
        void OnEspirar(InputAction.CallbackContext context);
    }
}
